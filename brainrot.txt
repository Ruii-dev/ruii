local RuiiLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/Ruii-dev/ruii/refs/heads/main/script.lua')))()
local Window = RuiiLib:MakeWindow({Name = "Ruii", HidePremium = false, SaveConfig = true, ConfigFolder = "Ruii"})

------------------------------------------------------------------------------

--Variables
local camera = workspace.CurrentCamera;
local CoreGui = game:GetService("CoreGui");
local uis = game:GetService("UserInputService");
local run = game:GetService("RunService");
local ReplicatedStorage = game:GetService("ReplicatedStorage");

local plyr = game.Players.LocalPlayer;
local mouse = plyr:GetMouse();
local char = plyr.Character or plyr.CharacterAdded:Wait();
local hrp = char:WaitForChild("HumanoidRootPart", math.huge);
local hum = char:WaitForChild("Humanoid", math.huge);

------------------------------------------------------------------------------

local MiscTab = Window:MakeTab({
	Name = "Misc",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local VisualsTab = Window:MakeTab({
	Name = "Visuals",
	Icon = "rbxassetid://4483345998",
	PremiumOnly = false
})

local ServTab = Window:MakeTab({
    Name = "Teleport",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

------------------------------------------------------------------------------

-- Variables globales
local RunService = game:GetService("RunService")
local Player = game.Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
local BodyVelocity = nil

-- Fonction pour activer/désactiver le speed hack
local SpeedEnabled = false
local SpeedValue = 16 -- Vitesse par défaut

local function onCharacterAdded(newCharacter)
    Character = newCharacter
    HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
    BodyVelocity = nil -- Réinitialiser BodyVelocity

    -- Ajouter le BodyVelocity si SpeedEnabled est activé
    if SpeedEnabled then
        BodyVelocity = Instance.new("BodyVelocity")
        BodyVelocity.MaxForce = Vector3.new(1e4, 0, 1e4) -- Permet un mouvement horizontal uniquement
        BodyVelocity.P = 1000 -- Puissance de la force appliquée
        BodyVelocity.Velocity = Vector3.zero -- Pas de mouvement initial
        BodyVelocity.Parent = HumanoidRootPart
    end
end

-- Attacher l'événement CharacterAdded pour chaque nouvelle mort
Player.CharacterAdded:Connect(onCharacterAdded)

-- Ajouter le toggle pour activer/désactiver le walkspeed
-- Toggle CFrame Speed
MiscTab:AddToggle({
    Name = "CFrame Speed",
    Default = false,
    Callback = function(Value)
        cframespeedtoggle = Value
    end
})

-- Slider de vitesse
MiscTab:AddSlider({
    Name = "Speed Value",
    Min = 0.01,
    Max = 1,
    Increment = 0.01,
    Default = 0.19,
    Callback = function(Value)
        speedvalue = Value
    end
})

-- Fonction de déplacement CFrame
game:GetService("RunService").Heartbeat:Connect(function()
    if cframespeedtoggle then
        local char = game.Players.LocalPlayer.Character
        if char and char:FindFirstChild("HumanoidRootPart") and char:FindFirstChildOfClass("Humanoid") then
            local hrp = char.HumanoidRootPart
            local hum = char:FindFirstChildOfClass("Humanoid")

            -- Si le joueur est vivant et se déplace
            if hum.MoveDirection.Magnitude > 0 then
                hrp.CFrame = hrp.CFrame + (hum.MoveDirection * speedvalue)
            end
        end
    end
end)

------------------------------------------------------------------------------

-- Variables globales
local RunService = game:GetService("RunService")
local Player = game.Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")

-- Activer/désactiver le jump hack
local JumpEnabled = false
local JumpPowerValue = 50 -- Puissance de saut par défaut (valeur normale pour Roblox est 50)

-- Fonction pour gérer le saut
local function onCharacterAdded(newCharacter)
    Character = newCharacter
    Humanoid = Character:WaitForChild("Humanoid")

    -- Appliquer la puissance de saut si le hack est activé
    if JumpEnabled then
        Humanoid.JumpPower = JumpPowerValue
    else
        Humanoid.JumpPower = 50 -- Valeur normale par défaut
    end
end

-- Attacher l'événement CharacterAdded pour chaque nouvelle mort
Player.CharacterAdded:Connect(onCharacterAdded)

-- Ajouter le toggle pour activer/désactiver le jump hack
-- Variables pour le high jump
local highjumptoggle = false
local jumpheight = 50  -- hauteur de saut par défaut

-- Toggle pour activer/désactiver le High Jump
MiscTab:AddToggle({
    Name = "High Jump",
    Default = false,
    Callback = function(Value)
        highjumptoggle = Value
    end
})

-- Slider pour la hauteur du saut
MiscTab:AddSlider({
    Name = "Jump Power",
    Min = 10,
    Max = 100,
    Increment = 1,
    Default = 80,
    Callback = function(Value)
        jumpheight = Value
    end
})

-- Détection du saut pour appliquer la poussée vers le haut
game:GetService("UserInputService").JumpRequest:Connect(function()
    if highjumptoggle then
        local char = game.Players.LocalPlayer.Character
        if char and char:FindFirstChild("HumanoidRootPart") and char:FindFirstChildOfClass("Humanoid") then
            -- Applique une translation verticale instantanée
            char.HumanoidRootPart.Velocity = Vector3.new(0, jumpheight, 0)
        end
    end
end)


------------------------------------------------------------------------------

--//Esp

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera

local highlightEnabled = false
local box2DEnabled = false
local box3DEnabled = false
local nameEnabled = false
local distanceEnabled = false
local highlights = {}
local boxes2D = {}
local boxes3D = {}
local nameTexts = {}
local distanceTexts = {}
local HighlightColor = Color3.fromRGB(255, 0, 0)

-- Fonction pour mettre à jour les ESP
local function updateESP()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = player.Character:FindFirstChild("HumanoidRootPart")

            -- Highlight ESP
            if highlightEnabled then
                if not highlights[player] then
                    local highlight = Instance.new("Highlight")
                    highlight.Adornee = player.Character
                    highlight.FillColor = HighlightColor
                    highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
                    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                    highlight.Parent = player.Character
                    highlights[player] = highlight
                end
            else
                if highlights[player] then
                    highlights[player]:Destroy()
                    highlights[player] = nil
                end
            end

            -- Box 2D
            if box2DEnabled then
                if not boxes2D[player] then
                    local box = {}
                    for i = 1, 4 do
                        local line = Drawing.new("Line")
                        line.Color = Color3.fromRGB(255, 255, 255)
                        line.Thickness = 2
                        line.Visible = false
                        table.insert(box, line)
                    end
                    boxes2D[player] = box
                end

                local size = Vector3.new(4, 7, 4)
                local corners = {
                    rootPart.Position + Vector3.new(-size.X / 2, size.Y / 2, 0),
                    rootPart.Position + Vector3.new(size.X / 2, size.Y / 2, 0),
                    rootPart.Position + Vector3.new(size.X / 2, -size.Y / 2, 0),
                    rootPart.Position + Vector3.new(-size.X / 2, -size.Y / 2, 0),
                }

                local viewportCorners = {}
                local onScreen = true
                for _, corner in ipairs(corners) do
                    local screenPosition = Camera:WorldToViewportPoint(corner)
                    if screenPosition.Z > 0 then
                        table.insert(viewportCorners, Vector2.new(screenPosition.X, screenPosition.Y))
                    else
                        onScreen = false
                        break
                    end
                end

                if onScreen then
                    local box = boxes2D[player]
                    for i = 1, 4 do
                        local nextIndex = (i % 4) + 1
                        box[i].From = viewportCorners[i]
                        box[i].To = viewportCorners[nextIndex]
                        box[i].Visible = true
                    end
                else
                    for _, line in ipairs(boxes2D[player]) do
                        line.Visible = false
                    end
                end
            else
                if boxes2D[player] then
                    for _, line in pairs(boxes2D[player]) do
                        line:Remove()
                    end
                    boxes2D[player] = nil
                end
            end

            -- Box 3D
            if box3DEnabled then
                if not boxes3D[player] then
                    local lines = {}
                    for i = 1, 12 do
                        local line = Drawing.new("Line")
                        line.Color = Color3.fromRGB(255, 255, 255)
                        line.Thickness = 2
                        line.Visible = false
                        table.insert(lines, line)
                    end
                    boxes3D[player] = lines
                end

                local minBound = rootPart.Position - Vector3.new(2, 3, 2)
                local maxBound = rootPart.Position + Vector3.new(2, 3, 2)

                local corners = {
                    Vector3.new(minBound.X, minBound.Y, minBound.Z),
                    Vector3.new(maxBound.X, minBound.Y, minBound.Z),
                    Vector3.new(maxBound.X, maxBound.Y, minBound.Z),
                    Vector3.new(minBound.X, maxBound.Y, minBound.Z),
                    Vector3.new(minBound.X, minBound.Y, maxBound.Z),
                    Vector3.new(maxBound.X, minBound.Y, maxBound.Z),
                    Vector3.new(maxBound.X, maxBound.Y, maxBound.Z),
                    Vector3.new(minBound.X, maxBound.Y, maxBound.Z),
                }

                local connections = {
                    {1, 2}, {2, 3}, {3, 4}, {4, 1}, -- Base
                    {5, 6}, {6, 7}, {7, 8}, {8, 5}, -- Top
                    {1, 5}, {2, 6}, {3, 7}, {4, 8}, -- Vertical
                }

                local lines = boxes3D[player]
                for i, connection in ipairs(connections) do
                    local start = Camera:WorldToViewportPoint(corners[connection[1]])
                    local stop = Camera:WorldToViewportPoint(corners[connection[2]])

                    if start.Z > 0 and stop.Z > 0 then
                        lines[i].From = Vector2.new(start.X, start.Y)
                        lines[i].To = Vector2.new(stop.X, stop.Y)
                        lines[i].Visible = true
                    else
                        lines[i].Visible = false
                    end
                end
            else
                if boxes3D[player] then
                    for _, line in pairs(boxes3D[player]) do
                        line:Remove()
                    end
                    boxes3D[player] = nil
                end
            end

            -- Name ESP
            if nameEnabled then
                if not nameTexts[player] then
                    local nameTag = Drawing.new("Text")
                    nameTag.Size = 22
                    nameTag.Center = true
                    nameTag.Outline = true
                    nameTag.Color = Color3.fromRGB(255, 255, 255)
                    nameTexts[player] = nameTag
                end
                local screenPos = Camera:WorldToViewportPoint(rootPart.Position)
                if screenPos.Z > 0 then
                    nameTexts[player].Text = player.DisplayName
                    nameTexts[player].Position = Vector2.new(screenPos.X, screenPos.Y - 40)
                    nameTexts[player].Visible = true
                else
                    nameTexts[player].Visible = false
                end
            else
                if nameTexts[player] then
                    nameTexts[player]:Remove()
                    nameTexts[player] = nil
                end
            end

            -- Distance ESP
            if distanceEnabled then
                if not distanceTexts[player] then
                    local distanceTag = Drawing.new("Text")
                    distanceTag.Size = 22
                    distanceTag.Center = true
                    distanceTag.Outline = true
                    distanceTag.Color = Color3.fromRGB(255, 255, 255)
                    distanceTexts[player] = distanceTag
                end
                local screenPos = Camera:WorldToViewportPoint(rootPart.Position)
                if screenPos.Z > 0 then
                    local distance = math.floor((Camera.CFrame.Position - rootPart.Position).Magnitude)
                    distanceTexts[player].Text = tostring(distance) .. "m"
                    distanceTexts[player].Position = Vector2.new(screenPos.X, screenPos.Y + 20)
                    distanceTexts[player].Visible = true
                else
                    distanceTexts[player].Visible = false
                end
            else
                if distanceTexts[player] then
                    distanceTexts[player]:Remove()
                    distanceTexts[player] = nil
                end
            end
        end
    end
end

-- Nettoyage à la suppression d'un joueur
Players.PlayerRemoving:Connect(function(player)
    if highlights[player] then
        highlights[player]:Destroy()
        highlights[player] = nil
    end

    if boxes2D[player] then
        for _, line in pairs(boxes2D[player]) do
            line:Remove()
        end
        boxes2D[player] = nil
    end

    if boxes3D[player] then
        for _, line in pairs(boxes3D[player]) do
            line:Remove()
        end
        boxes3D[player] = nil
    end

    if nameTexts[player] then
        nameTexts[player]:Remove()
        nameTexts[player] = nil
    end

    if distanceTexts[player] then
        distanceTexts[player]:Remove()
        distanceTexts[player] = nil
    end
end)

-- Boutons d'activation
VisualsTab:AddToggle({
    Name = "Highlight ESP",
    Default = false,
    Callback = function(state)
        highlightEnabled = state
        updateESP()
    end
})

VisualsTab:AddColorpicker({
    Name = "Highlight Color",
    Default = HighlightColor,
    Callback = function(Value)
        HighlightColor = Value
    end
})

VisualsTab:AddToggle({
    Name = "ESP Box 2D",
    Default = false,
    Callback = function(state)
        box2DEnabled = state
        updateESP()
    end
})

VisualsTab:AddToggle({
    Name = "ESP Box 3D",
    Default = false,
    Callback = function(state)
        box3DEnabled = state
        updateESP()
    end
})

VisualsTab:AddToggle({
    Name = "Name ESP",
    Default = false,
    Callback = function(state)
        nameEnabled = state
        updateESP()
    end
})

VisualsTab:AddToggle({
    Name = "Distance ESP",
    Default = false,
    Callback = function(state)
        distanceEnabled = state
        updateESP()
    end
})

RunService.RenderStepped:Connect(updateESP)

------------------------------------------------------------------------------

local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local player = game.Players.LocalPlayer
local placeId = game.PlaceId

local function getServers()
    print("Début récupération des serveurs")
    local servers = {}
    local cursor = nil

    local url = "https://games.roblox.com/v1/games/"..placeId.."/servers/Public?sortOrder=Asc&limit=100"
    if cursor then
        url = url .. "&cursor=" .. cursor
    end

    local success, response = pcall(function()
        return game:HttpGetAsync(url)
    end)

    if not success then
        warn("Erreur HTTP : " .. tostring(response))
        return nil
    end

    local data = HttpService:JSONDecode(response)
    if data and data.data then
        print("Serveurs trouvés: "..#data.data)
        for _, server in pairs(data.data) do
            table.insert(servers, server)
        end
    else
        print("Pas de données dans la réponse")
    end

    print("Total serveurs récupérés: "..#servers)
    return servers
end

local function teleportToDifferentServer()
    print("Début téléportation")
    local servers = getServers()
    if not servers or #servers == 0 then
        warn("Aucun serveur trouvé ou erreur durant la récupération.")
        return
    end

    local currentJobId = game.JobId
    local availableServers = {}

    for _, server in pairs(servers) do
        if server.id ~= currentJobId and server.playing < server.maxPlayers then
            table.insert(availableServers, server)
        end
    end

    print("Serveurs disponibles pour téléportation: "..#availableServers)

    if #availableServers == 0 then
        warn("Aucun serveur différent disponible. Tu es probablement sur le seul serveur actif.")
        return
    end

    local chosenServer = availableServers[math.random(1, #availableServers)]
    print("Téléportation vers serveur: "..chosenServer.id)

    local success, err = pcall(function()
        TeleportService:TeleportToPlaceInstance(placeId, chosenServer.id, player)
    end)
    if not success then
        warn("Erreur lors de la téléportation: "..tostring(err))
    end
end



ServTab:AddButton({
    Name = "Rejoindre un autre serveur",
    Callback = function()
        teleportToDifferentServer()
    end
})